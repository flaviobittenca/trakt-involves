//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 3 images.
  struct image {
    /// Image `involvesIcon`.
    static let involvesIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "involvesIcon")
    /// Image `watchingIcon`.
    static let watchingIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "watchingIcon")
    /// Image `watchlistIcon`.
    static let watchlistIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "watchlistIcon")
    
    /// `UIImage(named: "involvesIcon", bundle: ..., traitCollection: ...)`
    static func involvesIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.involvesIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "watchingIcon", bundle: ..., traitCollection: ...)`
    static func watchingIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.watchingIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "watchlistIcon", bundle: ..., traitCollection: ...)`
    static func watchlistIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.watchlistIcon, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 2 nibs.
  struct nib {
    /// Nib `DescriptionTableViewCell`.
    static let descriptionTableViewCell = _R.nib._DescriptionTableViewCell()
    /// Nib `ShowTableViewCell`.
    static let showTableViewCell = _R.nib._ShowTableViewCell()
    
    /// `UINib(name: "DescriptionTableViewCell", in: bundle)`
    static func descriptionTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.descriptionTableViewCell)
    }
    
    /// `UINib(name: "ShowTableViewCell", in: bundle)`
    static func showTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.showTableViewCell)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 7 storyboards.
  struct storyboard {
    /// Storyboard `Episodes`.
    static let episodes = _R.storyboard.episodes()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `List`.
    static let list = _R.storyboard.list()
    /// Storyboard `Login`.
    static let login = _R.storyboard.login()
    /// Storyboard `Search`.
    static let search = _R.storyboard.search()
    /// Storyboard `Seasons`.
    static let seasons = _R.storyboard.seasons()
    /// Storyboard `ShowInfo`.
    static let showInfo = _R.storyboard.showInfo()
    
    /// `UIStoryboard(name: "Episodes", bundle: ...)`
    static func episodes(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.episodes)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "List", bundle: ...)`
    static func list(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.list)
    }
    
    /// `UIStoryboard(name: "Login", bundle: ...)`
    static func login(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.login)
    }
    
    /// `UIStoryboard(name: "Search", bundle: ...)`
    static func search(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.search)
    }
    
    /// `UIStoryboard(name: "Seasons", bundle: ...)`
    static func seasons(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.seasons)
    }
    
    /// `UIStoryboard(name: "ShowInfo", bundle: ...)`
    static func showInfo(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.showInfo)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.strings` struct is generated, and contains static references to 9 localization keys.
    struct strings {
      /// Value: Add to watchlist
      static let addToWatchlist = Rswift.StringResource(key: "add.to.watchlist", tableName: "Strings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Already being watched
      static let alreadyBeingWatched = Rswift.StringResource(key: "already.being.watched", tableName: "Strings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Already in watchlist
      static let alreadyInWatchlist = Rswift.StringResource(key: "already.in.watchlist", tableName: "Strings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Mark as unwatched
      static let markAsUnwatched = Rswift.StringResource(key: "mark.as.unwatched", tableName: "Strings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Mark as watched
      static let markAsWatched = Rswift.StringResource(key: "mark.as.watched", tableName: "Strings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Next episode (%@):
      static let nextEpisodeDescription = Rswift.StringResource(key: "next.episode.description", tableName: "Strings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Search shows
      static let searchShows = Rswift.StringResource(key: "search.shows", tableName: "Strings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Watching
      static let watching = Rswift.StringResource(key: "watching", tableName: "Strings", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Watchlist
      static let watchlist = Rswift.StringResource(key: "watchlist", tableName: "Strings", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: Add to watchlist
      static func addToWatchlist(_: Void = ()) -> String {
        return NSLocalizedString("add.to.watchlist", tableName: "Strings", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Already being watched
      static func alreadyBeingWatched(_: Void = ()) -> String {
        return NSLocalizedString("already.being.watched", tableName: "Strings", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Already in watchlist
      static func alreadyInWatchlist(_: Void = ()) -> String {
        return NSLocalizedString("already.in.watchlist", tableName: "Strings", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Mark as unwatched
      static func markAsUnwatched(_: Void = ()) -> String {
        return NSLocalizedString("mark.as.unwatched", tableName: "Strings", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Mark as watched
      static func markAsWatched(_: Void = ()) -> String {
        return NSLocalizedString("mark.as.watched", tableName: "Strings", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Next episode (%@):
      static func nextEpisodeDescription(_ value1: String) -> String {
        return String(format: NSLocalizedString("next.episode.description", tableName: "Strings", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: Search shows
      static func searchShows(_: Void = ()) -> String {
        return NSLocalizedString("search.shows", tableName: "Strings", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Watching
      static func watching(_: Void = ()) -> String {
        return NSLocalizedString("watching", tableName: "Strings", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Watchlist
      static func watchlist(_: Void = ()) -> String {
        return NSLocalizedString("watchlist", tableName: "Strings", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _DescriptionTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DescriptionTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> DescriptionTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DescriptionTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _ShowTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ShowTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ShowTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ShowTableViewCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try login.validate()
      try seasons.validate()
      try search.validate()
      try episodes.validate()
      try list.validate()
      try showInfo.validate()
    }
    
    struct episodes: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let episodesViewController = StoryboardViewControllerResource<EpisodesViewController>(identifier: "EpisodesViewController")
      let name = "Episodes"
      
      func episodesViewController(_: Void = ()) -> EpisodesViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: episodesViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.episodes().episodesViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'episodesViewController' could not be loaded from storyboard 'Episodes' as 'EpisodesViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct list: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let listNavigationController = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "ListNavigationController")
      let listViewController = StoryboardViewControllerResource<ListViewController>(identifier: "ListViewController")
      let name = "List"
      
      func listNavigationController(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: listNavigationController)
      }
      
      func listViewController(_: Void = ()) -> ListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: listViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.list().listViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'listViewController' could not be loaded from storyboard 'List' as 'ListViewController'.") }
        if _R.storyboard.list().listNavigationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'listNavigationController' could not be loaded from storyboard 'List' as 'UIKit.UINavigationController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct login: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let loginViewController = StoryboardViewControllerResource<LoginViewController>(identifier: "LoginViewController")
      let name = "Login"
      
      func loginViewController(_: Void = ()) -> LoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "involvesIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'involvesIcon' is used in storyboard 'Login', but couldn't be loaded.") }
        if _R.storyboard.login().loginViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginViewController' could not be loaded from storyboard 'Login' as 'LoginViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct search: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Search"
      let searchNavigationController = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "SearchNavigationController")
      let searchViewController = StoryboardViewControllerResource<SearchViewController>(identifier: " SearchViewController")
      
      func searchNavigationController(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: searchNavigationController)
      }
      
      func searchViewController(_: Void = ()) -> SearchViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: searchViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.search().searchViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'searchViewController' could not be loaded from storyboard 'Search' as 'SearchViewController'.") }
        if _R.storyboard.search().searchNavigationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'searchNavigationController' could not be loaded from storyboard 'Search' as 'UIKit.UINavigationController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct seasons: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Seasons"
      let seasonsViewController = StoryboardViewControllerResource<SeasonsViewController>(identifier: "SeasonsViewController")
      
      func seasonsViewController(_: Void = ()) -> SeasonsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: seasonsViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.seasons().seasonsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'seasonsViewController' could not be loaded from storyboard 'Seasons' as 'SeasonsViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct showInfo: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ShowInfo"
      let showInfoViewController = StoryboardViewControllerResource<ShowInfoViewController>(identifier: "ShowInfoViewController")
      
      func showInfoViewController(_: Void = ()) -> ShowInfoViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: showInfoViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.showInfo().showInfoViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'showInfoViewController' could not be loaded from storyboard 'ShowInfo' as 'ShowInfoViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
